// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go bitbucket.org/sudosweden/dockyards-api/pkg/types

// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package types

import "time"

// Cluster defines model for cluster.
#Cluster: {
	allocate_internal_ip?: null | bool      @go(AllocateInternalIP,*bool)
	api_endpoint?:         null | string    @go(APIEndpoint,*string)
	condition?:            null | string    @go(Condition,*string)
	created_at:            time.Time        @go(CreatedAt)
	deleted_at?:           null | time.Time @go(DeletedAt,*time.Time)
	dns_zones?: null | [...string] @go(DNSZones,*[]string)
	duration?:         null | string    @go(Duration,*string)
	expires_at?:       null | time.Time @go(ExpiresAt,*time.Time)
	id:                string           @go(ID)
	name:              string           @go(Name)
	node_pools_count?: null | int       @go(NodePoolsCount,*int)
	nodes_count?:      null | int       @go(NodesCount,*int)
	organization?:     null | string    @go(Organization,*string)
	state?:            null | string    @go(State,*string)
	updated_at?:       null | time.Time @go(UpdatedAt,*time.Time)
	version?:          null | string    @go(Version,*string)
}

// ClusterOptions defines model for cluster_options.
#ClusterOptions: {
	allocate_internal_ip?: null | bool   @go(AllocateInternalIP,*bool)
	cluster_template?:     null | string @go(ClusterTemplate,*string)
	duration?:             null | string @go(Duration,*string)
	ingress_provider?:     null | string @go(IngressProvider,*string)
	name:                  string        @go(Name)
	no_cluster_apps?:      null | bool   @go(NoClusterApps,*bool)
	no_ingress_provider?:  null | bool   @go(NoIngressProvider,*bool)
	node_pool_options?: null | [...#NodePoolOptions] @go(NodePoolOptions,*[]NodePoolOptions)
	version?: null | string @go(Version,*string)
}

// Credential defines model for credential.
#Credential: {
	created_at?:               null | time.Time @go(CreatedAt,*time.Time)
	credential_template_name?: null | string    @go(CredentialTemplateName,*string)
	data?: null | {[string]: bytes} @go(Data,*map[string][]byte)
	deleted_at?: null | time.Time @go(DeletedAt,*time.Time)
	id:          string           @go(ID)
	name:        string           @go(Name)
	updated_at?: null | time.Time @go(UpdatedAt,*time.Time)
}

// CredentialOptions defines model for credential_options.
#CredentialOptions: {
	credential_template_name?: null | string @go(CredentialTemplateName,*string)
	data?: null | {[string]: bytes} @go(Data,*map[string][]byte)
	name?: null | string @go(Name,*string)
}

// IdentityProvider defines model for identity_provider.
#IdentityProvider: {
	display_name?: null | string @go(DisplayName,*string)
	id:            string        @go(ID)
	name:          string        @go(Name)
}

// Invitation defines model for invitation.
#Invitation: {
	created_at:                 time.Time        @go(CreatedAt)
	deleted_at?:                null | time.Time @go(DeletedAt,*time.Time)
	duration?:                  null | string    @go(Duration,*string)
	email?:                     null | string    @go(Email,*string)
	expires_at?:                null | time.Time @go(ExpiresAt,*time.Time)
	id:                         string           @go(ID)
	name:                       string           @go(Name)
	organization_display_name?: null | string    @go(OrganizationDisplayName,*string)
	organization_name?:         null | string    @go(OrganizationName,*string)
	role:                       string           @go(Role)
	updated_at?:                null | time.Time @go(UpdatedAt,*time.Time)
}

// InvitationOptions defines model for invitation_options.
#InvitationOptions: {
	duration?: null | string @go(Duration,*string)
	email:     string        @go(Email)
	role:      string        @go(Role)
}

// IPPool defines model for ip_pool.
#IPPool: {
	addresses?: null | [...string] @go(Addresses,*[]string)
	id?:   null | string @go(ID,*string)
	name?: null | string @go(Name,*string)
}

// KubeconfigOptions defines model for kubeconfig_options.
#KubeconfigOptions: {
	duration?: null | string @go(Duration,*string)
}

// Login defines model for login.
#Login: {
	email:    string @go(Email)
	password: string @go(Password)
}

// Node defines model for node.
#Node: {
	id:    string @go(ID)
	name:  string @go(Name)
	state: string @go(State)
}

// NodePool defines model for node_pool.
#NodePool: {
	cluster_id?:                    null | string    @go(ClusterID,*string)
	control_plane?:                 null | bool      @go(ControlPlane,*bool)
	control_plane_components_only?: null | bool      @go(ControlPlaneComponentsOnly,*bool)
	cpu_count?:                     null | int       @go(CPUCount,*int)
	created_at?:                    null | time.Time @go(CreatedAt,*time.Time)
	deleted_at?:                    null | time.Time @go(DeletedAt,*time.Time)
	disk_size?:                     null | string    @go(DiskSize,*string)
	id:                             string           @go(ID)
	load_balancer?:                 null | bool      @go(LoadBalancer,*bool)
	name:                           string           @go(Name)
	nodes?: null | [...#Node] @go(Nodes,*[]Node)
	quantity?: null | int    @go(Quantity,*int)
	ram_size?: null | string @go(RAMSize,*string)
	storage_resources?: null | [...#StorageResource] @go(StorageResources,*[]StorageResource)
	updated_at?: null | time.Time @go(UpdatedAt,*time.Time)
}

// NodePoolOptions defines model for node_pool_options.
#NodePoolOptions: {
	control_plane?:                 null | bool   @go(ControlPlane,*bool)
	control_plane_components_only?: null | bool   @go(ControlPlaneComponentsOnly,*bool)
	cpu_count?:                     null | int    @go(CPUCount,*int)
	disk_size?:                     null | string @go(DiskSize,*string)
	load_balancer?:                 null | bool   @go(LoadBalancer,*bool)
	name?:                          null | string @go(Name,*string)
	quantity?:                      null | int    @go(Quantity,*int)
	ram_size?:                      null | string @go(RAMSize,*string)
	storage_resources?: null | [...#StorageResource] @go(StorageResources,*[]StorageResource)
}

// Options defines model for options.
#Options: {
	storage_resource_types?: null | [...string] @go(StorageResourceTypes,*[]string)
	version: [...string] @go(Version,[]string)
}

// Organization defines model for organization.
#Organization: {
	condition?:                 null | string    @go(Condition,*string)
	created_at:                 time.Time        @go(CreatedAt)
	credential_reference_name?: null | string    @go(CredentialReferenceName,*string)
	deleted_at?:                null | time.Time @go(DeletedAt,*time.Time)
	display_name?:              null | string    @go(DisplayName,*string)
	duration?:                  null | string    @go(Duration,*string)
	expires_at?:                null | time.Time @go(ExpiresAt,*time.Time)
	id:                         string           @go(ID)
	name:                       string           @go(Name)
	provider_id?:               null | string    @go(ProviderID,*string)
	updated_at?:                null | time.Time @go(UpdatedAt,*time.Time)
	voucher_code?:              null | string    @go(VoucherCode,*string)
}

// OrganizationOptions defines model for organization_options.
#OrganizationOptions: {
	credential_reference_name?: null | string @go(CredentialReferenceName,*string)
	display_name?:              null | string @go(DisplayName,*string)
	duration?:                  null | string @go(Duration,*string)
	voucher_code?:              null | string @go(VoucherCode,*string)
}

// StorageResource defines model for storage_resource.
#StorageResource: {
	name:     string        @go(Name)
	quantity: string        @go(Quantity)
	type?:    null | string @go(Type,*string)
}

// Tokens defines model for tokens.
#Tokens: {
	AccessToken:  string
	RefreshToken: string
}

// UnprocessableEntityErrors defines model for unprocessable_entity_errors.
#UnprocessableEntityErrors: {
	errors: [...string] @go(Errors,[]string)
}

// User defines model for user.
#User: {
	created_at?:   null | time.Time @go(CreatedAt,*time.Time)
	display_name?: null | string    @go(DisplayName,*string)
	email:         string           @go(Email)
	id:            string           @go(ID)
	name:          string           @go(Name)
	password?:     null | string    @go(Password,*string)
	provider_id?:  null | string    @go(ProviderID,*string)
	updated_at?:   null | time.Time @go(UpdatedAt,*time.Time)
}

// UserOptions defines model for user_options.
#UserOptions: {
	display_name?: null | string @go(DisplayName,*string)
	email:         string        @go(Email)
	password:      string        @go(Password)
}

// Workload defines model for workload.
#Workload: {
	condition?:  null | string    @go(Condition,*string)
	created_at:  time.Time        @go(CreatedAt)
	deleted_at?: null | time.Time @go(DeletedAt,*time.Time)
	id:          string           @go(ID)
	input?: null | {...} @go(Input,*map[string]interface{})
	name:                    string           @go(Name)
	namespace?:              null | string    @go(Namespace,*string)
	provenience?:            null | string    @go(Provenience,*string)
	updated_at?:             null | time.Time @go(UpdatedAt,*time.Time)
	workload_template_name?: null | string    @go(WorkloadTemplateName,*string)
}

// WorkloadOptions defines model for workload_options.
#WorkloadOptions: {
	input?: null | {...} @go(Input,*map[string]interface{})
	name?:                   null | string @go(Name,*string)
	namespace?:              null | string @go(Namespace,*string)
	workload_template_name?: null | string @go(WorkloadTemplateName,*string)
}
