// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go bitbucket.org/sudosweden/dockyards-api/pkg/types

// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package types

import "time"

// App defines model for app.
#App: {
	app_steps?: null | [...#AppStep] @go(AppSteps,*[]AppStep)
	description?: null | string @go(Description,*string)
	icon?:        null | string @go(Icon,*string)
	id:           string        @go(ID)
	name:         string        @go(Name)
}

// AppStep defines model for app_step.
#AppStep: {
	name: string @go(Name)
	step_options?: null | [...#StepOption] @go(StepOptions,*[]StepOption)
}

// Cluster defines model for cluster.
#Cluster: {
	allocate_internal_ip?: null | bool   @go(AllocateInternalIP,*bool)
	created_at:            time.Time     @go(CreatedAt)
	duration?:             null | string @go(Duration,*string)
	id:                    string        @go(ID)
	name:                  string        @go(Name)
	node_count:            int           @go(NodeCount)
	node_pools: [...#NodePool] @go(NodePools,[]NodePool)
	organization: string @go(Organization)
	state:        string @go(State)
	version:      string @go(Version)
}

// ClusterOptions defines model for cluster_options.
#ClusterOptions: {
	allocate_internal_ip?: null | bool   @go(AllocateInternalIP,*bool)
	cluster_template?:     null | string @go(ClusterTemplate,*string)
	duration?:             null | string @go(Duration,*string)
	ingress_provider?:     null | string @go(IngressProvider,*string)
	name:                  string        @go(Name)
	no_cluster_apps?:      null | bool   @go(NoClusterApps,*bool)
	no_ingress_provider?:  null | bool   @go(NoIngressProvider,*bool)
	node_pool_options?: null | [...#NodePoolOptions] @go(NodePoolOptions,*[]NodePoolOptions)
	version?: null | string @go(Version,*string)
}

// ClusterOverview defines model for cluster_overview.
#ClusterOverview: {
	deployments?: null | [...#DeploymentOverview] @go(Deployments,*[]DeploymentOverview)
	id:   string @go(ID)
	name: string @go(Name)
}

// Credential defines model for credential.
#Credential: {
	credential_template?: null | string @go(CredentialTemplate,*string)
	data?: null | {[string]: bytes} @go(Data,*map[string][]byte)
	id:           string @go(ID)
	name:         string @go(Name)
	organization: string @go(Organization)
}

// DeploymentOverview defines model for deployment_overview.
#DeploymentOverview: {
	id:   string @go(ID)
	name: string @go(Name)
}

// IPPool defines model for ip_pool.
#IPPool: {
	addresses?: null | [...string] @go(Addresses,*[]string)
	id?:   null | string @go(ID,*string)
	name?: null | string @go(Name,*string)
}

// Login defines model for login.
#Login: {
	email:    string @go(Email)
	password: string @go(Password)
}

// Node defines model for node.
#Node: {
	id:    string @go(ID)
	name:  string @go(Name)
	state: string @go(State)
}

// NodePool defines model for node_pool.
#NodePool: {
	cluster_id:                     string      @go(ClusterID)
	control_plane?:                 null | bool @go(ControlPlane,*bool)
	control_plane_components_only?: null | bool @go(ControlPlaneComponentsOnly,*bool)
	cpu_count:                      int         @go(CPUCount)
	disk_size:                      string      @go(DiskSize)
	id:                             string      @go(ID)
	load_balancer?:                 null | bool @go(LoadBalancer,*bool)
	name:                           string      @go(Name)
	nodes: [...#Node] @go(Nodes,[]Node)
	quantity: int    @go(Quantity)
	ram_size: string @go(RAMSize)
	storage_resources?: null | [...#StorageResource] @go(StorageResources,*[]StorageResource)
}

// NodePoolOptions defines model for node_pool_options.
#NodePoolOptions: {
	control_plane?:                 null | bool   @go(ControlPlane,*bool)
	control_plane_components_only?: null | bool   @go(ControlPlaneComponentsOnly,*bool)
	cpu_count?:                     null | int    @go(CPUCount,*int)
	disk_size?:                     null | string @go(DiskSize,*string)
	load_balancer?:                 null | bool   @go(LoadBalancer,*bool)
	name?:                          null | string @go(Name,*string)
	quantity?:                      null | int    @go(Quantity,*int)
	ram_size?:                      null | string @go(RAMSize,*string)
	storage_resources?: null | [...#StorageResource] @go(StorageResources,*[]StorageResource)
}

// Options defines model for options.
#Options: {
	storage_resource_types?: null | [...string] @go(StorageResourceTypes,*[]string)
	version: [...string] @go(Version,[]string)
}

// Organization defines model for organization.
#Organization: {
	created_at:    time.Time     @go(CreatedAt)
	display_name?: null | string @go(DisplayName,*string)
	duration?:     null | string @go(Duration,*string)
	id:            string        @go(ID)
	name:          string        @go(Name)
	updated_at:    time.Time     @go(UpdatedAt)
}

// OrganizationOverview defines model for organization_overview.
#OrganizationOverview: {
	clusters?: null | [...#ClusterOverview] @go(Clusters,*[]ClusterOverview)
	id:   string @go(ID)
	name: string @go(Name)
	users?: null | [...#UserOverview] @go(Users,*[]UserOverview)
}

// Overview defines model for overview.
#Overview: {
	organizations: [...#OrganizationOverview] @go(Organizations,[]OrganizationOverview)
}

// StepOption defines model for step_option.
#StepOption: {
	default?:      null | string @go(Default,*string)
	display_name?: null | string @go(DisplayName,*string)
	hidden?:       null | bool   @go(Hidden,*bool)
	json_pointer?: null | string @go(JSONPointer,*string)
	managed?:      null | bool   @go(Managed,*bool)
	selection?: null | [...string] @go(Selection,*[]string)
	tags?: null | [...string] @go(Tags,*[]string)
	toggle?: null | [...string] @go(Toggle,*[]string)
	type?: null | string @go(Type,*string)
}

// StorageResource defines model for storage_resource.
#StorageResource: {
	name:     string        @go(Name)
	quantity: string        @go(Quantity)
	type?:    null | string @go(Type,*string)
}

// Tokens defines model for tokens.
#Tokens: {
	AccessToken:  string
	RefreshToken: string
}

// UnprocessableEntityErrors defines model for unprocessable_entity_errors.
#UnprocessableEntityErrors: {
	errors: [...string] @go(Errors,[]string)
}

// User defines model for user.
#User: {
	created_at?: null | time.Time @go(CreatedAt,*time.Time)
	email:       string           @go(Email)
	id:          string           @go(ID)
	name:        string           @go(Name)
	password?:   null | string    @go(Password,*string)
	updated_at?: null | time.Time @go(UpdatedAt,*time.Time)
}

// UserOverview defines model for user_overview.
#UserOverview: {
	email: string @go(Email)
	id:    string @go(ID)
}

// Workload defines model for workload.
#Workload: {
	id?: null | string @go(ID,*string)
	input?: null | {...} @go(Input,*map[string]interface{})
	name?:                   null | string @go(Name,*string)
	namespace?:              null | string @go(Namespace,*string)
	provenience?:            null | string @go(Provenience,*string)
	workload_template_name?: null | string @go(WorkloadTemplateName,*string)
}
