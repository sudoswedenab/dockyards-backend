// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package v1

import (
	"time"

	"github.com/google/uuid"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for DeploymentStatusHealth.
const (
	DeploymentStatusHealthError   DeploymentStatusHealth = "error"
	DeploymentStatusHealthHealthy DeploymentStatusHealth = "healthy"
	DeploymentStatusHealthWarning DeploymentStatusHealth = "warning"
)

// App defines model for app.
type App struct {
	AppSteps    []AppStep `json:"app_steps"`
	Description *string   `json:"description,omitempty"`
	Icon        *string   `json:"icon,omitempty"`
	ID          uuid.UUID `json:"id"`
	Name        string    `gorm:"unique; not null" json:"name"`
}

// AppStep defines model for app_step.
type AppStep struct {
	AppID       uuid.UUID    `json:"app_id"`
	ID          uuid.UUID    `json:"id"`
	Name        string       `json:"name"`
	StepOptions []StepOption `json:"step_options"`
}

// Cluster defines model for cluster.
type Cluster struct {
	CreatedAt    time.Time  `json:"created_at"`
	ID           string     `json:"id"`
	Name         string     `json:"name"`
	NodeCount    int        `json:"node_count"`
	NodePools    []NodePool `json:"node_pools"`
	Organization string     `json:"organization"`
	State        string     `json:"state"`
	Version      string     `json:"version"`
}

// ClusterOptions defines model for cluster_options.
type ClusterOptions struct {
	IngressProvider   *string            `json:"ingress_provider,omitempty"`
	Name              string             `json:"name"`
	NoClusterApps     *bool              `json:"no_cluster_apps,omitempty"`
	NoIngressProvider *bool              `json:"no_ingress_provider,omitempty"`
	NodePoolOptions   *[]NodePoolOptions `json:"node_pool_options,omitempty"`
	SingleNode        *bool              `json:"single_node,omitempty"`
	Version           *string            `json:"version,omitempty"`
}

// ClusterOverview defines model for cluster_overview.
type ClusterOverview struct {
	Deployments *[]DeploymentOverview `json:"deployments,omitempty"`
	ID          string                `json:"id"`
	Name        string                `json:"name"`
}

// Credential defines model for credential.
type Credential struct {
	Data         *CredentialData `json:"data,omitempty"`
	ID           uuid.UUID       `json:"id"`
	Name         string          `json:"name"`
	Organization string          `json:"organization"`
}

// Deployment defines model for deployment.
type Deployment struct {
	ClusterID      string           `json:"cluster_id"`
	ContainerImage *string          `json:"container_image,omitempty"`
	CredentialID   *string          `json:"credential_id,omitempty"`
	HelmChart      *string          `json:"helm_chart,omitempty"`
	HelmRepository *string          `json:"helm_repository,omitempty"`
	HelmValues     *HelmValues      `json:"helm_values,omitempty"`
	HelmVersion    *string          `json:"helm_version,omitempty"`
	ID             uuid.UUID        `json:"id"`
	Name           *string          `json:"name,omitempty"`
	Namespace      *string          `json:"namespace,omitempty"`
	Port           *int             `json:"port,omitempty"`
	Status         DeploymentStatus `json:"status"`
}

// DeploymentOverview defines model for deployment_overview.
type DeploymentOverview struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// DeploymentStatus defines model for deployment_status.
type DeploymentStatus struct {
	CreatedAt    time.Time               `json:"created_at"`
	DeploymentID uuid.UUID               `json:"deployment_id"`
	Health       *DeploymentStatusHealth `json:"health,omitempty"`
	ID           uuid.UUID               `json:"id"`
	State        *string                 `json:"state,omitempty"`
	URLs         *[]string               `gorm:"serializer:json" json:"urls,omitempty"`
}

// DeploymentStatusHealth defines model for DeploymentStatus.Health.
type DeploymentStatusHealth string

// Login defines model for login.
type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Node defines model for node.
type Node struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	State string `json:"state"`
}

// NodePool defines model for node_pool.
type NodePool struct {
	ControlPlane               *bool  `json:"control_plane,omitempty"`
	ControlPlaneComponentsOnly *bool  `json:"control_plane_components_only,omitempty"`
	CPUCount                   int    `json:"cpu_count"`
	DiskSizeGb                 int    `json:"disk_size_gb"`
	Etcd                       *bool  `json:"etcd,omitempty"`
	ID                         string `json:"id"`
	LoadBalancer               *bool  `json:"load_balancer,omitempty"`
	Name                       string `json:"name"`
	Nodes                      []Node `json:"nodes"`
	Quantity                   int    `json:"quantity"`
	RAMSizeMb                  int    `json:"ram_size_mb"`
}

// NodePoolOptions defines model for node_pool_options.
type NodePoolOptions struct {
	ControlPlane               *bool  `json:"control_plane,omitempty"`
	ControlPlaneComponentsOnly *bool  `json:"control_plane_components_only,omitempty"`
	CPUCount                   *int   `json:"cpu_count,omitempty"`
	DiskSizeGb                 *int   `json:"disk_size_gb,omitempty"`
	Etcd                       *bool  `json:"etcd,omitempty"`
	LoadBalancer               *bool  `json:"load_balancer,omitempty"`
	Name                       string `json:"name"`
	Quantity                   int    `json:"quantity"`
	RAMSizeMb                  *int   `json:"ram_size_mb,omitempty"`
}

// Options defines model for options.
type Options struct {
	NodePoolOptions []NodePoolOptions `json:"node_pool_options"`
	SingleNode      bool              `json:"single_node"`
	Version         []string          `json:"version"`
}

// Organization defines model for organization.
type Organization struct {
	CreatedAt   time.Time `json:"created_at"`
	DisplayName *string   `json:"display_name,omitempty"`
	ID          uuid.UUID `json:"id"`
	Name        string    `gorm:"unique; not null" json:"name"`
	UpdatedAt   time.Time `json:"updated_at"`
	Users       []User    `gorm:"many2many:organization_user" json:"users"`
}

// OrganizationOverview defines model for organization_overview.
type OrganizationOverview struct {
	Clusters *[]ClusterOverview `json:"clusters,omitempty"`
	ID       string             `json:"id"`
	Name     string             `json:"name"`
	Users    *[]UserOverview    `json:"users,omitempty"`
}

// Overview defines model for overview.
type Overview struct {
	Organizations []OrganizationOverview `json:"organizations"`
}

// Signup defines model for signup.
type Signup struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// StepOption defines model for step_option.
type StepOption struct {
	AppStepID   uuid.UUID `json:"app_step_id"`
	Default     *string   `json:"default,omitempty"`
	DisplayName string    `json:"display_name"`
	Hidden      *bool     `json:"hidden,omitempty"`
	JSONPointer string    `json:"json_pointer"`
	Selection   *[]string `gorm:"serializer:json" json:"selection,omitempty"`
	Type        *string   `json:"type,omitempty"`
}

// Tokens defines model for tokens.
type Tokens struct {
	AccessToken  string `json:"AccessToken"`
	RefreshToken string `json:"RefreshToken"`
}

// User defines model for user.
type User struct {
	CreatedAt     *time.Time      `json:"created_at,omitempty"`
	Email         string          `gorm:"unique; not null" json:"email"`
	ID            uuid.UUID       `json:"id"`
	Name          string          `gorm:"unique; not null" json:"name"`
	Organizations *[]Organization `gorm:"many2many:organization_user" json:"organizations,omitempty"`
	Password      string          `json:"password"`
	UpdatedAt     *time.Time      `json:"updated_at,omitempty"`
}

// UserOverview defines model for user_overview.
type UserOverview struct {
	Email string `json:"email"`
	ID    string `json:"id"`
}

// CreateDeploymentJSONRequestBody defines body for CreateDeployment for application/json ContentType.
type CreateDeploymentJSONRequestBody = Deployment

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = Login

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = Organization

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody = ClusterOptions

// CreateCredentialJSONRequestBody defines body for CreateCredential for application/json ContentType.
type CreateCredentialJSONRequestBody = Credential

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody = Signup
