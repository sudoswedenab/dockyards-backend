// Package sudo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package sudo

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	externalRef0 "bitbucket.org/sudosweden/dockyards-backend/api/v1"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sudo/clusters)
	GetClusters(w http.ResponseWriter, r *http.Request)

	// (GET /sudo/credentials/{credential_id})
	GetCredential(w http.ResponseWriter, r *http.Request, credentialID string)

	// (GET /sudo/deployments)
	GetDeployments(w http.ResponseWriter, r *http.Request)

	// (POST /sudo/deployments)
	CreateDeployment(w http.ResponseWriter, r *http.Request)

	// (GET /sudo/deployments/{deployment_id})
	GetDeployment(w http.ResponseWriter, r *http.Request, deploymentID string)

	// (POST /sudo/deployments/{deployment_id}/status)
	CreateDeploymentStatus(w http.ResponseWriter, r *http.Request, deploymentID string)

	// (GET /sudo/kubeconfigs/{cluster_id})
	GetKubeconfig(w http.ResponseWriter, r *http.Request, clusterID string)

	// (GET /sudo/organizations)
	GetOrganizations(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /sudo/clusters)
func (_ Unimplemented) GetClusters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /sudo/credentials/{credential_id})
func (_ Unimplemented) GetCredential(w http.ResponseWriter, r *http.Request, credentialID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /sudo/deployments)
func (_ Unimplemented) GetDeployments(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /sudo/deployments)
func (_ Unimplemented) CreateDeployment(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /sudo/deployments/{deployment_id})
func (_ Unimplemented) GetDeployment(w http.ResponseWriter, r *http.Request, deploymentID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /sudo/deployments/{deployment_id}/status)
func (_ Unimplemented) CreateDeploymentStatus(w http.ResponseWriter, r *http.Request, deploymentID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /sudo/kubeconfigs/{cluster_id})
func (_ Unimplemented) GetKubeconfig(w http.ResponseWriter, r *http.Request, clusterID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /sudo/organizations)
func (_ Unimplemented) GetOrganizations(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetClusters operation middleware
func (siw *ServerInterfaceWrapper) GetClusters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusters(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCredential operation middleware
func (siw *ServerInterfaceWrapper) GetCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "credential_id" -------------
	var credentialID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "credential_id", runtime.ParamLocationPath, chi.URLParam(r, "credential_id"), &credentialID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredential(w, r, credentialID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDeployments operation middleware
func (siw *ServerInterfaceWrapper) GetDeployments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDeployments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateDeployment operation middleware
func (siw *ServerInterfaceWrapper) CreateDeployment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDeployment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDeployment operation middleware
func (siw *ServerInterfaceWrapper) GetDeployment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deployment_id" -------------
	var deploymentID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "deployment_id", runtime.ParamLocationPath, chi.URLParam(r, "deployment_id"), &deploymentID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deployment_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDeployment(w, r, deploymentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateDeploymentStatus operation middleware
func (siw *ServerInterfaceWrapper) CreateDeploymentStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deployment_id" -------------
	var deploymentID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "deployment_id", runtime.ParamLocationPath, chi.URLParam(r, "deployment_id"), &deploymentID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deployment_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDeploymentStatus(w, r, deploymentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetKubeconfig operation middleware
func (siw *ServerInterfaceWrapper) GetKubeconfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, chi.URLParam(r, "cluster_id"), &clusterID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKubeconfig(w, r, clusterID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrganizations operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrganizations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sudo/clusters", wrapper.GetClusters)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sudo/credentials/{credential_id}", wrapper.GetCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sudo/deployments", wrapper.GetDeployments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sudo/deployments", wrapper.CreateDeployment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sudo/deployments/{deployment_id}", wrapper.GetDeployment)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sudo/deployments/{deployment_id}/status", wrapper.CreateDeploymentStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sudo/kubeconfigs/{cluster_id}", wrapper.GetKubeconfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sudo/organizations", wrapper.GetOrganizations)
	})

	return r
}

type GetClustersRequestObject struct {
}

type GetClustersResponseObject interface {
	VisitGetClustersResponse(w http.ResponseWriter) error
}

type GetClusters200JSONResponse []externalRef0.Cluster

func (response GetClusters200JSONResponse) VisitGetClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusters500Response struct {
}

func (response GetClusters500Response) VisitGetClustersResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetCredentialRequestObject struct {
	CredentialID string `json:"credential_id"`
}

type GetCredentialResponseObject interface {
	VisitGetCredentialResponse(w http.ResponseWriter) error
}

type GetCredential200JSONResponse externalRef0.Credential

func (response GetCredential200JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredential500Response struct {
}

func (response GetCredential500Response) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetDeploymentsRequestObject struct {
}

type GetDeploymentsResponseObject interface {
	VisitGetDeploymentsResponse(w http.ResponseWriter) error
}

type GetDeployments200JSONResponse []externalRef0.Deployment

func (response GetDeployments200JSONResponse) VisitGetDeploymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeployments500Response struct {
}

func (response GetDeployments500Response) VisitGetDeploymentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateDeploymentRequestObject struct {
	Body *CreateDeploymentJSONRequestBody
}

type CreateDeploymentResponseObject interface {
	VisitCreateDeploymentResponse(w http.ResponseWriter) error
}

type CreateDeployment200JSONResponse externalRef0.Deployment

func (response CreateDeployment200JSONResponse) VisitCreateDeploymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateDeployment500Response struct {
}

func (response CreateDeployment500Response) VisitCreateDeploymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetDeploymentRequestObject struct {
	DeploymentID string `json:"deployment_id"`
}

type GetDeploymentResponseObject interface {
	VisitGetDeploymentResponse(w http.ResponseWriter) error
}

type GetDeployment200JSONResponse externalRef0.Deployment

func (response GetDeployment200JSONResponse) VisitGetDeploymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeployment500Response struct {
}

func (response GetDeployment500Response) VisitGetDeploymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateDeploymentStatusRequestObject struct {
	DeploymentID string `json:"deployment_id"`
	Body         *CreateDeploymentStatusJSONRequestBody
}

type CreateDeploymentStatusResponseObject interface {
	VisitCreateDeploymentStatusResponse(w http.ResponseWriter) error
}

type CreateDeploymentStatus201Response struct {
}

func (response CreateDeploymentStatus201Response) VisitCreateDeploymentStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateDeploymentStatus500Response struct {
}

func (response CreateDeploymentStatus500Response) VisitCreateDeploymentStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetKubeconfigRequestObject struct {
	ClusterID string `json:"cluster_id"`
}

type GetKubeconfigResponseObject interface {
	VisitGetKubeconfigResponse(w http.ResponseWriter) error
}

type GetKubeconfig200JSONResponse string

func (response GetKubeconfig200JSONResponse) VisitGetKubeconfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKubeconfig500Response struct {
}

func (response GetKubeconfig500Response) VisitGetKubeconfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetOrganizationsRequestObject struct {
}

type GetOrganizationsResponseObject interface {
	VisitGetOrganizationsResponse(w http.ResponseWriter) error
}

type GetOrganizations200JSONResponse []externalRef0.Organization

func (response GetOrganizations200JSONResponse) VisitGetOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizations500Response struct {
}

func (response GetOrganizations500Response) VisitGetOrganizationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /sudo/clusters)
	GetClusters(ctx context.Context, request GetClustersRequestObject) (GetClustersResponseObject, error)

	// (GET /sudo/credentials/{credential_id})
	GetCredential(ctx context.Context, request GetCredentialRequestObject) (GetCredentialResponseObject, error)

	// (GET /sudo/deployments)
	GetDeployments(ctx context.Context, request GetDeploymentsRequestObject) (GetDeploymentsResponseObject, error)

	// (POST /sudo/deployments)
	CreateDeployment(ctx context.Context, request CreateDeploymentRequestObject) (CreateDeploymentResponseObject, error)

	// (GET /sudo/deployments/{deployment_id})
	GetDeployment(ctx context.Context, request GetDeploymentRequestObject) (GetDeploymentResponseObject, error)

	// (POST /sudo/deployments/{deployment_id}/status)
	CreateDeploymentStatus(ctx context.Context, request CreateDeploymentStatusRequestObject) (CreateDeploymentStatusResponseObject, error)

	// (GET /sudo/kubeconfigs/{cluster_id})
	GetKubeconfig(ctx context.Context, request GetKubeconfigRequestObject) (GetKubeconfigResponseObject, error)

	// (GET /sudo/organizations)
	GetOrganizations(ctx context.Context, request GetOrganizationsRequestObject) (GetOrganizationsResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetClusters operation middleware
func (sh *strictHandler) GetClusters(w http.ResponseWriter, r *http.Request) {
	var request GetClustersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusters(ctx, request.(GetClustersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusters")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClustersResponseObject); ok {
		if err := validResponse.VisitGetClustersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCredential operation middleware
func (sh *strictHandler) GetCredential(w http.ResponseWriter, r *http.Request, credentialID string) {
	var request GetCredentialRequestObject

	request.CredentialID = credentialID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredential(ctx, request.(GetCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialResponseObject); ok {
		if err := validResponse.VisitGetCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDeployments operation middleware
func (sh *strictHandler) GetDeployments(w http.ResponseWriter, r *http.Request) {
	var request GetDeploymentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeployments(ctx, request.(GetDeploymentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeployments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDeploymentsResponseObject); ok {
		if err := validResponse.VisitGetDeploymentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDeployment operation middleware
func (sh *strictHandler) CreateDeployment(w http.ResponseWriter, r *http.Request) {
	var request CreateDeploymentRequestObject

	var body CreateDeploymentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDeployment(ctx, request.(CreateDeploymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDeployment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDeploymentResponseObject); ok {
		if err := validResponse.VisitCreateDeploymentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDeployment operation middleware
func (sh *strictHandler) GetDeployment(w http.ResponseWriter, r *http.Request, deploymentID string) {
	var request GetDeploymentRequestObject

	request.DeploymentID = deploymentID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeployment(ctx, request.(GetDeploymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeployment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDeploymentResponseObject); ok {
		if err := validResponse.VisitGetDeploymentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDeploymentStatus operation middleware
func (sh *strictHandler) CreateDeploymentStatus(w http.ResponseWriter, r *http.Request, deploymentID string) {
	var request CreateDeploymentStatusRequestObject

	request.DeploymentID = deploymentID

	var body CreateDeploymentStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDeploymentStatus(ctx, request.(CreateDeploymentStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDeploymentStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDeploymentStatusResponseObject); ok {
		if err := validResponse.VisitCreateDeploymentStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKubeconfig operation middleware
func (sh *strictHandler) GetKubeconfig(w http.ResponseWriter, r *http.Request, clusterID string) {
	var request GetKubeconfigRequestObject

	request.ClusterID = clusterID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKubeconfig(ctx, request.(GetKubeconfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKubeconfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKubeconfigResponseObject); ok {
		if err := validResponse.VisitGetKubeconfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrganizations operation middleware
func (sh *strictHandler) GetOrganizations(w http.ResponseWriter, r *http.Request) {
	var request GetOrganizationsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrganizations(ctx, request.(GetOrganizationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrganizations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrganizationsResponseObject); ok {
		if err := validResponse.VisitGetOrganizationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
